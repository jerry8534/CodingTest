import java.util.*;
import java.io.*;
import java.util.stream.*;

class Solution {
    public int solution(int[] priorities, int location) {
        int answer = 0;
        /*List<Integer> list = Arrays.stream(priorities).boxed().collect(Collectors.toList());
        for(int i = 0; i < priorities.length; i++){
            answer++;
            int max = list.stream().max(Comparator.comparing(x -> x)).orElseThrow(NoSuchElementException::new);
            int[] maxIndex = IntStream.range(0, list.size()).filter(w -> list.get(w) == max).toArray();
            if(list.get(0) == max){
                list.remove(0);
                location--;
            }
            else{
                List<Integer> subList1 = list.subList(0, maxIndex[0]);
                List<Integer> subList2 = list.subList(maxIndex[0] + 1, list.size());
                if(subList2.isEmpty()) continue;
                if(location == maxIndex[0]) break;
                if(location < maxIndex[0]){
                    list.clear();
                    list.addAll(subList2);
                    list.addAll(subList1);
                    location = subList2.size() + location -1;
                }
                else if(location > maxIndex[0]){
                    list.clear();
                    list.addAll(subList2);
                    list.addAll(subList1);
                    location = location - subList1.size() -1;
                }
            }
            if(location < 0) break;
        }
        return answer;*/
        import java.util.*;

class Solution {
    public int solution(int[] priorities, int location) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        int answer = 0;

        for (int i = 0; i < priorities.length; i++) {
            pq.add(priorities[i]);
        }

        while (!pq.isEmpty()) {
            for (int i = 0; i < priorities.length; i++) {
                if (priorities[i] == pq.peek()) {
                    if (i == location) {
                        answer++;
                        return answer;
                    }   
                    pq.poll();
                    answer++;
                }
            }
        }
        return -1;
    }
}

    }
}